-- migration_meta:
--   - purpose: create initial database schema for 10x-cards
--   - tables_affected:
--     - public.cards
--     - public.ai_generations
--   - special_notes: includes rls policies and a trigger for updated_at

-- create the cards table to store user's flashcards.
create table public.cards (
    id uuid primary key default gen_random_uuid(),
    user_id uuid not null references auth.users(id) on delete cascade,
    front character varying(200) not null,
    back character varying(500) not null,
    source text not null check (source in ('manual', 'ai')),
    interval integer not null default 0,
    repetition integer not null default 0,
    ease_factor real not null default 2.5,
    due_date timestamptz not null default now(),
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

-- add comments to the columns of the cards table.
comment on table public.cards is 'stores user flashcards with spaced repetition data.';
comment on column public.cards.id is 'unique identifier for the flashcard.';
comment on column public.cards.user_id is 'foreign key to the user who owns the flashcard.';
comment on column public.cards.front is 'the front content of the flashcard.';
comment on column public.cards.back is 'the back content of the flashcard.';
comment on column public.cards.source is 'the source of the flashcard (''manual'' or ''ai'').';
comment on column public.cards.interval is 'the interval in days for the next repetition.';
comment on column public.cards.repetition is 'the number of successful repetitions.';
comment on column public.cards.ease_factor is 'the ease factor used by the srs algorithm.';
comment on column public.cards.due_date is 'the date of the next scheduled repetition.';
comment on column public.cards.created_at is 'timestamp of when the record was created.';
comment on column public.cards.updated_at is 'timestamp of when the record was last modified.';

-- create the ai_generations table to log ai generation metrics.
create table public.ai_generations (
    id uuid primary key default gen_random_uuid(),
    user_id uuid not null references auth.users(id) on delete cascade,
    input_text text not null,
    generated_count integer not null,
    accepted_count integer not null,
    created_at timestamptz not null default now()
);

-- add comments to the columns of the ai_generations table.
comment on table public.ai_generations is 'logs metrics related to ai flashcard generation.';
comment on column public.ai_generations.id is 'unique identifier for the log entry.';
comment on column public.ai_generations.user_id is 'foreign key to the user who generated the flashcards.';
comment on column public.ai_generations.input_text is 'the source text used for generation.';
comment on column public.ai_generations.generated_count is 'the number of flashcards generated by ai.';
comment on column public.ai_generations.accepted_count is 'the number of flashcards accepted by the user.';
comment on column public.ai_generations.created_at is 'timestamp of when the record was created.';

-- create indexes for performance optimization.
create index on public.cards (user_id);
create index on public.cards (due_date);
create index on public.ai_generations (user_id);

-- create a function to automatically handle updated_at timestamps.
create or replace function public.handle_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

-- create a trigger to call the handle_updated_at function before updating a card.
create trigger on_cards_update
before update on public.cards
for each row
execute procedure public.handle_updated_at();

-- enable row level security for the cards table.
alter table public.cards enable row level security;

-- policies for the 'cards' table
-- policy: allow authenticated users to select their own cards.
create policy "allow authenticated read access" on public.cards for select to authenticated using (auth.uid() = user_id);
-- policy: deny anonymous users to select any cards.
create policy "deny anonymous read access" on public.cards for select to anon using (false);

-- policy: allow authenticated users to insert cards for themselves.
create policy "allow authenticated insert access" on public.cards for insert to authenticated with check (auth.uid() = user_id);
-- policy: deny anonymous users to insert any cards.
create policy "deny anonymous insert access" on public.cards for insert to anon with check (false);

-- policy: allow authenticated users to update their own cards.
create policy "allow authenticated update access" on public.cards for update to authenticated using (auth.uid() = user_id);
-- policy: deny anonymous users to update any cards.
create policy "deny anonymous update access" on public.cards for update to anon using (false);

-- policy: allow authenticated users to delete their own cards.
create policy "allow authenticated delete access" on public.cards for delete to authenticated using (auth.uid() = user_id);
-- policy: deny anonymous users to delete any cards.
create policy "deny anonymous delete access" on public.cards for delete to anon using (false);


-- enable row level security for the ai_generations table.
alter table public.ai_generations enable row level security;

-- policies for the 'ai_generations' table
-- policy: allow authenticated users to select their own generation logs.
create policy "allow authenticated read access" on public.ai_generations for select to authenticated using (auth.uid() = user_id);
-- policy: deny anonymous users to select any generation logs.
create policy "deny anonymous read access" on public.ai_generations for select to anon using (false);

-- policy: allow authenticated users to insert generation logs for themselves.
create policy "allow authenticated insert access" on public.ai_generations for insert to authenticated with check (auth.uid() = user_id);
-- policy: deny anonymous users to insert any generation logs.
create policy "deny anonymous insert access" on public.ai_generations for insert to anon with check (false);
